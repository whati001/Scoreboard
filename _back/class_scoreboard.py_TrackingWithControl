#!/bin/python3

#scoreboard_main v1.0 c Andreas Karner
#created for local clubs of municipal Hoffstaetten

#Channellog:
#24-08-2015: create new version with classes and threading library
#25-08-2015: continue creating new version with classes and threading library
#25-08-2015: continue creating new version with classes, deleting threading library, useing Tkinter timing
#19-09-2015: create initial setup gui and add controling with GPIO Port
################################################################################
#import libraries
#try if python2 is used
try:
	from Tkinter import *
except ImportError:
	from tkinter import *

from PIL import Image, ImageTk
from threading import Timer
import os
import subprocess
import time
import datetime
import smbus
import RPi.GPIO as GPIO

###############################################################################
#global variables
#root directory of the script
var_root_dir = None
var_interval_time = [0,0]

#Classes 
###############################################################################
#scoreboard_main_Mainframe
class scoreboard_main_class():
	###stardard function###
	def __init__(self, scoreboard_master, class_smbus):
		print('Scoreboard_main started')
		###Global variables###
		global var_root_dir
		global var_interval_time
		
		self.var_scoreboard_set = [IntVar(),IntVar(),IntVar(),IntVar(),IntVar(),IntVar(),IntVar(),StringVar()]
		#first initial set
		for idx, var in enumerate(self.var_scoreboard_set):
			if idx == 7:
				self.var_scoreboard_set[idx].set('JA')
			elif idx == 2:
				self.var_scoreboard_set[idx].set('2015')
			else:
				self.var_scoreboard_set[idx].set('00')

		self.var_scoreboard_set[2].set(2015)
		self.var_scoreboard_set[7].set('NEIN')
		self.var_root_dir = var_root_dir
		self.class_smbus = class_smbus
		#Reset all LEDs
		#self.class_smbus.write_out(7, 8)
		#self.class_smbus.write_out(6, 8)
		#self.class_smbus.write_out(5, 8)
		#self.class_smbus.write_out(4, 8)
		#self.class_smbus.write_out(3, 8)
		#self.class_smbus.write_out(2, 8)
		#self.class_smbus.write_out(1, 8)
		#self.class_smbus.write_out(0, 8)
		self.scoreboard_master = scoreboard_master
		
		###Draw GUI Scoreboard###
		#Log if scoreboard_main_main is starting
		print('Scoreboard_main GUI will be draw...')

		###Draw the GUI###
		self.scoreboard_master.title('Anzeigetafel')
		
		#Fullscreen
		#self.scoreboard_master.attributes('-fullscreen',True)
		self.scoreboard_master.takefocus=True
		
		###Headerinfo###
		self.Header01 = Label(self.scoreboard_master, text='Anzeigetapfel', font='Arial 32 bold')
		self.Header01.pack()
		self.Header01.place(relx=0.5, y=50, anchor=CENTER)
			
		self.Header02 = Label(self.scoreboard_master, text='Bitte Einstellungen vornehmen und Betriebsart w√§hlen:', font='Arial 27 bold')
		self.Header02.pack()
		self.Header02.place(relx=0.5, y=120, anchor=CENTER)
		
		###Button### 
		#start the different operation modes
		#stopwatch_master Button 
		self.stopwatch_master = Button(self.scoreboard_master, text='Stoppuhr', font='Arial 20 bold', command=lambda: self.new_window(stopwatch_master_class))
		self.stopwatch_master.pack()
		self.stopwatch_master.place(relx=0.8, rely=0.9, height=100, width=150, anchor=CENTER)
		
		#countdown_master Button
		self.countdown_master = Button(self.scoreboard_master, text='Countdown', font='Arial 20 bold',command=lambda: self.new_window(countdown_master_class))
		self.countdown_master.pack()
		self.countdown_master.place(relx=0.2, rely=0.9, height=100, width=150, anchor=CENTER)
		
		###Logos###
		#to change them, change the directory
		print(self.var_root_dir)
		self.jvplogo = ImageTk.PhotoImage(Image.open(self.var_root_dir+'/images/jvplogo.gif'))
		self.jvplogo_label=Label(self.scoreboard_master, image = self.jvplogo)
		self.jvplogo_label.pack()
		self.jvplogo_label.place(relx=0.4, rely=0.9, anchor=CENTER)
		
		self.srlogo = ImageTk.PhotoImage(Image.open(self.var_root_dir+'/images/srlogo.gif'))
		self.srlogo_label=Label(self.scoreboard_master, image = self.srlogo)
		self.srlogo_label.pack()
		self.srlogo_label.place(relx=0.6, rely=0.9, anchor=CENTER)
	
		###Close the GUI###
		self.exit = Button(self.scoreboard_master, text='Schliessen', command=lambda: self.scoreboard_master.destroy())
		self.exit.pack()
		self.exit.place(relx=1, rely=1, x=-10, y=-10, anchor=SE)

		###Create initial Setup###
		self.initialsetup()

	#initial Setup_masterframe
	def initialsetup(self):
		#Get the current dateinfo with the libary datetime, see import part above
		current_datetime = datetime.datetime.now()

		###Draw the initial Setup GUI###
		print('scoreboard_master GUI will be draw...')
	        
		###Setup System Date###	
		#Draw Label Change System Date
		self.ChangeSystemTime = Label(self.scoreboard_master, text='System Datum/Zeit:', font='Arial 25 bold')
		self.ChangeSystemTime.pack()
		self.ChangeSystemTime.place(relx=0.05, rely=0.25, anchor=W)
		
		#Day Label	
		self.day=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[0], font='Arial 25 bold')
		self.day.pack()
		self.day.place(relx=0.5, rely=0.25, anchor=CENTER)

		#Day Label Info
		self.day_info=Label(self.scoreboard_master, text='Tag', font='Arial 15 bold')
		self.day_info.pack()
		self.day_info.place(relx=0.5, rely=0.25, x=0, y=-30, anchor=CENTER)			
		
		#increment the day
		self.day_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',0))
		self.day_plus.pack()
		self.day_plus.place(relx=0.5, rely=0.25, x=-2, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the day
		self.day_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',0))
		self.day_minus.pack()
		self.day_minus.place(relx=0.5, rely=0.25, x=+2, y=+30, height=40, width=40, anchor=NW)
		
		#Day Month Delimiter Label	
		self.day_month_delimiter=Label(self.scoreboard_master, text='.', font='Arial 25 bold')
		self.day_month_delimiter.pack()
		self.day_month_delimiter.place(relx=0.5, rely=0.25, x=+50, anchor=CENTER)

		#Month Label	
		self.month=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[1], font='Arial 25 bold')
		self.month.pack()
		self.month.place(relx=0.5, rely=0.25, x=+100, anchor=CENTER)			
		
		#Month Label Info
		self.month_info=Label(self.scoreboard_master, text='Monat', font='Arial 15 bold')
		self.month_info.pack()
		self.month_info.place(relx=0.5, rely=0.25, x=100, y=-30, anchor=CENTER)

		#increment the month
		self.month_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',1))
		self.month_plus.pack()
		self.month_plus.place(relx=0.5, rely=0.25, x=98, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the month
		self.month_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',1))
		self.month_minus.pack()
		self.month_minus.place(relx=0.5, rely=0.25, x=102, y=+30, height=40, width=40, anchor=NW)

		#Day Month Delimiter Label	
		self.month_year_delimiter=Label(self.scoreboard_master, text='.', font='Arial 25 bold')
		self.month_year_delimiter.pack()
		self.month_year_delimiter.place(relx=0.5, rely=0.25, x=150, anchor=CENTER)

		#Year Label	
		self.year=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[2], font='Arial 25 bold')
		self.year.pack()
		self.year.place(relx=0.5, rely=0.25, x=+200, anchor=CENTER)			
		
		#year Label Info
		self.year_info=Label(self.scoreboard_master, text='Jahr', font='Arial 15 bold')
		self.year_info.pack()
		self.year_info.place(relx=0.5, rely=0.25, x=200, y=-30, anchor=CENTER)

		#increment the year
		self.year_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',2))
		self.year_plus.pack()
		self.year_plus.place(relx=0.5, rely=0.25, x=198, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the year
		self.year_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',2))
		self.year_minus.pack()
		self.year_minus.place(relx=0.5, rely=0.25, x=202, y=+30, height=40, width=40, anchor=NW)

		#Hour Label	
		self.hour=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[3], font='Arial 25 bold')
		self.hour.pack()
		self.hour.place(relx=0.5, rely=0.25, x=+400, anchor=CENTER)			
		
		#hour Label Info
		self.hour_info=Label(self.scoreboard_master, text='Stunde', font='Arial 15 bold')
		self.hour_info.pack()
		self.hour_info.place(relx=0.5, rely=0.25, x=400, y=-30, anchor=CENTER)

		#increment the hour
		self.hour_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',3))
		self.hour_plus.pack()
		self.hour_plus.place(relx=0.5, rely=0.25, x=398, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the hour
		self.hour_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',3))
		self.hour_minus.pack()
		self.hour_minus.place(relx=0.5, rely=0.25, x=402, y=+30, height=40, width=40, anchor=NW)

		#Hour Minute Delimiter Label	
		self.hour_minute_delimiter=Label(self.scoreboard_master, text=':', font='Arial 25 bold')
		self.hour_minute_delimiter.pack()
		self.hour_minute_delimiter.place(relx=0.5, rely=0.25, x=+450, anchor=CENTER)		

		#Minute Label	
		self.minute=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[4], font='Arial 25 bold')
		self.minute.pack()
		self.minute.place(relx=0.5, rely=0.25, x=+500, anchor=CENTER)			
		
		#minute Label Info
		self.minute_info=Label(self.scoreboard_master, text='Minuten', font='Arial 15 bold')
		self.minute_info.pack()
		self.minute_info.place(relx=0.5, rely=0.25, x=500, y=-30, anchor=CENTER)

		#increment the minute
		self.minute_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',4))
		self.minute_plus.pack()
		self.minute_plus.place(relx=0.5, rely=0.25, x=498, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the minute
		self.minute_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',4))
		self.minute_minus.pack()
		self.minute_minus.place(relx=0.5, rely=0.25, x=502, y=+30, height=40, width=40, anchor=NW)

		###Setup Interval###	
		#Draw Label interval
		self.interval = Label(self.scoreboard_master, text='Intervalzeit:', font='Arial 25 bold')
		self.interval.pack()
		self.interval.place(relx=0.05, rely=0.45, anchor=W)
		
		#Minute Label	
		self.interval_minute=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[5], font='Arial 25 bold')
		self.interval_minute.pack()
		self.interval_minute.place(relx=0.5, rely=0.45, anchor=CENTER)

		#Minute Label Info
		self.interval_minute_info=Label(self.scoreboard_master, text='Minute', font='Arial 15 bold')
		self.interval_minute_info.pack()
		self.interval_minute_info.place(relx=0.5, rely=0.45, x=0, y=-30, anchor=CENTER)			
		
		#increment the minute
		self.interval_minute_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',5))
		self.interval_minute_plus.pack()
		self.interval_minute_plus.place(relx=0.5, rely=0.45, x=-2, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the minute
		self.interval_minute_minus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',5))
		self.interval_minute_minus.pack()
		self.interval_minute_minus.place(relx=0.5, rely=0.45, x=+2, y=+30, height=40, width=40, anchor=NW)
		
		#Interval Minute Second Delimiter	
		self.interval_minute_second_delimiter=Label(self.scoreboard_master, text=':', font='Arial 25 bold')
		self.interval_minute_second_delimiter.pack()
		self.interval_minute_second_delimiter.place(relx=0.5, rely=0.45, x=+50, anchor=CENTER)

		#Second Label	
		self.interval_second=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[6], font='Arial 25 bold')
		self.interval_second.pack()
		self.interval_second.place(relx=0.5, rely=0.45, x=+100, anchor=CENTER)			
		
		#Second Label Info
		self.interval_second_info=Label(self.scoreboard_master, text='Sekunden', font='Arial 15 bold')
		self.interval_second_info.pack()
		self.interval_second_info.place(relx=0.5, rely=0.45, x=100, y=-30, anchor=CENTER)

		#increment the second
		self.interval_second_plus=Button(self.scoreboard_master, text='+', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('+',6))
		self.interval_second_plus.pack()
		self.interval_second_plus.place(relx=0.5, rely=0.45, x=98, y=+30, height=40, width=40, anchor=NE)
		
		#decrement the second
		self.interval_second_plusminus=Button(self.scoreboard_master, text='-', font='Arial 25 bold', command=lambda: self.scoreboard_initial_set('-',6))
		self.interval_second_plusminus.pack()
		self.interval_second_plusminus.place(relx=0.5, rely=0.45, x=102, y=+30, height=40, width=40, anchor=NW)

		###Setup Logging###	
		#Draw Label Logging
		self.logging = Label(self.scoreboard_master, text='Logging:', font='Arial 25 bold')
		self.logging.pack()
		self.logging.place(relx=0.05, rely=0.65, anchor=W)
		
		#Minute Label	
		self.logging=Label(self.scoreboard_master, textvariable=self.var_scoreboard_set[7], font='Arial 25 bold')
		self.logging.pack()
		self.logging.place(relx=0.5, rely=0.65, anchor=CENTER)

		#Minute Label Info
		self.logging_info=Label(self.scoreboard_master, text='Ja/Nein', font='Arial 15 bold')
		self.logging_info.pack()
		self.logging_info.place(relx=0.5, rely=0.65, x=0, y=-30, anchor=CENTER)			
		
		#enable the logging
		self.logging_enable=Button(self.scoreboard_master, text='JA', font='Arial 10 bold', command=lambda: self.scoreboard_initial_set('+',7))
		self.logging_enable.pack()
		self.logging_enable.place(relx=0.5, rely=0.65, x=-2, y=+30, height=40, width=40, anchor=NE)
		
		#disable the logging
		self.logging_disenable=Button(self.scoreboard_master, text='NEIN', font='Arial 10 bold', command=lambda: self.scoreboard_initial_set('-',7))
		self.logging_disenable.pack()
		self.logging_disenable.place(relx=0.5, rely=0.65, x=+2, y=+30, height=40, width=40, anchor=NW)

		#Save Settings Button 
		self.initial_save = Button(self.scoreboard_master, text='Speichern', font='Arial 20 bold', command=self.scoreboard_initial_save)
		self.initial_save.pack()
		self.initial_save.place(relx=0.5, rely=0.9, height=100, width=150, anchor=CENTER)

	#Save initial settings
	def scoreboard_initial_save(self):
		var_date_time_command = 'date -s"'+str(self.var_scoreboard_set[2].get())+'-'+str(self.var_scoreboard_set[1].get())+'-'+str(self.var_scoreboard_set[0].get())+' '+str(self.var_scoreboard_set[4].get())+':'+str(self.var_scoreboard_set[5].get())+'"'
		print(var_date_time_command)
		subprocess.Popen(var_date_time_command, universal_newlines=True, shell=True)

	def scoreboard_initial_set(self, toogle, position):
		self.toogle = toogle
		self.position = position
		if self.toogle == '+':
			if self.position == 0 and self.var_scoreboard_set[position].get() < 31:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 1 and self.var_scoreboard_set[position].get() < 12:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 2:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 3 and self.var_scoreboard_set[position].get() < 60:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 4 and self.var_scoreboard_set[position].get() < 59:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 5 and self.var_scoreboard_set[position].get() < 60:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 6 and self.var_scoreboard_set[position].get() < 59:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()+1).zfill(2))
			elif self.position == 7:
				self.var_scoreboard_set[position].set('JA')

		elif self.toogle == '-':
			if self.position == 7:
				self.var_scoreboard_set[position].set('NEIN')
			elif self.var_scoreboard_set[position].get() > 0 and self.position != 7:
				self.var_scoreboard_set[position].set(str(self.var_scoreboard_set[position].get()-1).zfill(2))

	def new_window(self, toogle):
		self.newWindow = Toplevel(self.scoreboard_master)
		#Start stopwatch or countdown or initial Setup
		self.operationMode = toogle(self.newWindow, self.class_smbus)

#stopwatch_masterframe
class stopwatch_master_class():
	###Standard function###
	def __init__(self, scoreboard_master, class_smbus):
		print('Stopwath_main started')
		self.operationMode_master = scoreboard_master
		self.class_smbus = class_smbus
		#Reset all LEDs
		#self.class_smbus.write_out(7, 8)
		#self.class_smbus.write_out(6, 8)
		#self.class_smbus.write_out(5, 8)
		#self.class_smbus.write_out(4, 8)
		#self.class_smbus.write_out(3, 8)
		#self.class_smbus.write_out(2, 8)
		#self.class_smbus.write_out(1, 8)
		#self.class_smbus.write_out(0, 8)
		self.var_track_set = None
		self.var_track_value = None
		self.var_time_old = None
		self.var_track_enable = None
		self.var_track_set = [0,0]
		self.var_track_value = [0,0,0,0]

		###Draw the stopwatch GUI###
		print('stopwatch_master GUI will be draw...')

		self.operationMode_master.title('Stoppuhr')
	        
		#Fullscreen
		#self.operationMode_master.attributes('-fullscreen',True)
		self.operationMode_master.takefocus=True

	        ###Headerinfo###
		self.Header01=Label(self.operationMode_master, text='Stoppuhr', font='Arial 50 bold')
		self.Header01.pack()
		self.Header01.place(relx=0.5, y=50, anchor=CENTER)
		
		###Time Input###
		#Label for minutes, can change with beneath buttons
		self.minutes=Label(self.operationMode_master, text='00', font='Arial 40 bold')
		self.minutes.pack()
		self.minutes.place(relx=0.5, rely=0.5, x=-100, anchor=CENTER)
	
		#i.write_out(ncrement the minutes
		self.minutes_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',0))
		self.minutes_plus.pack()
		self.minutes_plus.place(relx=0.5, rely=0.5, x=-30, y=-5, height=40, width=40, anchor=S)
		
		#decrement the minutes
		self.minutes_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',0))
		self.minutes_minus.pack()
		self.minutes_minus.place(relx=0.5, rely=0.5, x=-30, y=5, height=40, width=40, anchor=N)
		
		#Label for second, can change with beneath buttons
		self.secondes=Label(self.operationMode_master, text='00', font='Arial 40 bold')
		self.secondes.pack()
		self.secondes.place(relx=0.5, x=30, rely=0.5, anchor=CENTER)
	
		#increment the seconds
		self.secondes_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',1))
		self.secondes_plus.pack()
		self.secondes_plus.place(relx=0.5, rely=0.5, x=100, y=-5, height=40, width=40, anchor=S)
	
		#decrement the seconds
		self.secondes_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',1))
		self.secondes_minus.pack()
		self.secondes_minus.place(relx=0.5, rely=0.5, x=100, y=5, height=40, width=40, anchor=N)
		
		#Stopwatch and Countdown Label	
		self.steps=Label(self.operationMode_master, text='00 : 00', font='Arial 80 bold')
		self.steps.pack()
		self.steps.place(relx=0.5, rely=0.25, anchor=CENTER)

		###Scores###	
		#Label and InfoLabel for score of home team, can change with beneath buttons
		self.Home_Player_Info=Label(self.operationMode_master, text='Punkte Heimmannschaft', font='Arial 20 bold')
		self.Home_Player_Info.pack()
		self.Home_Player_Info.place(relx=0, x=200, rely=0.5, y=-70, anchor=CENTER)
	
		self.Home_Player=Label(self.operationMode_master, text='00', font='Arial 60 bold')
		self.Home_Player.pack()
		self.Home_Player.place(relx=0, x=150, rely=0.5, anchor=CENTER)
	
		#increment the score of home team
		self.Home_Player_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',2))
		self.Home_Player_plus.pack()
		self.Home_Player_plus.place(relx=0, rely=0.5, x=250, y=-5, height=40, width=40, anchor=S)
	
		#decrement the score of home team
		self.Home_Player_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',2))
		self.Home_Player_minus.pack()
		self.Home_Player_minus.place(relx=0, rely=0.5, x=250, y=5, height=40, width=40, anchor=N)
	
		#Label and InfoLabel for score of guest team, can change with beneath buttons
		self.Guest_Player_Info=Label(self.operationMode_master, text='Punkte Gastmanschaft', font='Arial 20 bold')
		self.Guest_Player_Info.pack()
		self.Guest_Player_Info.place(relx=1, x=-200, rely=0.5, y=-70, anchor=CENTER)
	
		self.Guest_Player=Label(self.operationMode_master, text='00', font='Arial 60 bold')
		self.Guest_Player.pack()
		self.Guest_Player.place(relx=1, x=-150, rely=0.5, anchor=CENTER)
	
		#increment the score of guest team
		self.Guest_Player_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',3))
		self.Guest_Player_plus.pack()
		self.Guest_Player_plus.place(relx=1, x=-250, rely=0.5, y=-5, height=40, width=40, anchor=S)
	
		#decrement the score of guest team
		self.Guest_Player_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',3))
		self.Guest_Player_minus.pack()
		self.Guest_Player_minus.place(relx=1, x=-250, rely=0.5, y=5, height=40, width=40, anchor=N)
			
		###Start Counter###
		self.btn_start=Button(self.operationMode_master, text='Start', font='Arial 32 bold', command=lambda: self.enabel_tracking('1'))
		self.btn_start.pack()
		self.btn_start.place(relx=0.25, rely=0.8, height=100, width=150, anchor=CENTER)
	
		###Break Counter###
		self.btn_break=Button(self.operationMode_master, text='Pause', font='Arial 32 bold', state=DISABLED, command=lambda: self.enabel_tracking('0'))
		self.btn_break.pack()
		self.btn_break.place(relx=0.5, rely=0.8, height=100, width=150, anchor=CENTER)
	
		###Clear and stop counter###
		self.btn_clear=Button(self.operationMode_master, text='Stopp', font='Arial 32 bold', state=DISABLED, command=self.clear_count)
		self.btn_clear.pack()
		self.btn_clear.place(relx=0.75, rely=0.8, height=100, width=150, anchor=CENTER)
	
		###Clock Label###
		self.clock=Label(self.operationMode_master, font='Arial 20 bold')
		self.clock.pack()
		self.clock.place(relx=0.5, rely=1, x=-5, y=-5, anchor=S)
		#Start update function
		self.stopwatch_master_update()
	
	        ###Close countdown GUI###
		self.exit = Button(self.operationMode_master, text='Zur√ºck', command=lambda: self.operationMode_master.destroy())
		self.exit.pack()
		self.exit.place(relx=1, rely=1, x=-10, y=-10, anchor=SE)
	
	def operationMode_master_set(self, toggle, position):
			if position == 0 or position == 1:
				if toggle == '+' and self.var_track_set[position] < 60:
					self.var_track_set[position]+=1
				
				elif toggle == '-' and self.var_track_set[position] > 0:
					self.var_track_set[position]-=1
			
				if position == 0:
					self.minutes.config(text='%0.2d' %(self.var_track_set[position]))
				elif position == 1:
					self.secondes.config(text='%0.2d' %(self.var_track_set[position]))
	
			elif position == 2 or position == 3:
				if toggle == '+' and self.var_track_value[position] < 99:
					self.var_track_value[position]+=1
				elif toggle == '-' and self.var_track_value[position] > 0:
					self.var_track_value[position]-=1
				
				###Set Ouput###
				if position == 2:
					#Virtual
					self.Home_Player.config(text='%0.2d' %(self.var_track_value[position]))
					#LED
					#self.class_smbus.write_out(0, (int(str(self.var_track_value[position]).zfill(2)[0])))
					#self.class_smbus.write_out(1, (int(str(self.var_track_value[position]).zfill(2)[1])))
				
				elif position == 3:
					#Virtual
					self.Guest_Player.config(text='%0.2d' %(self.var_track_value[position]))
					#LED
					#self.class_smbus.write_out(6, (int(str(self.var_track_value[position]).zfill(2)[0])))
					#self.class_smbus.write_out(7, (int(str(self.var_track_value[position]).zfill(2)[1])))
			#Tempory LOG
			#print(self.var_track_value[position])

	def stopwatch_master_update(self):
		#for exactier timing self.var_time_old is define in __init___
		self.var_time_currently = time.strftime('%H:%M:%S')
		#print(self.var_time_currently != self.var_time_old)
		if self.var_time_currently != self.var_time_old:
			self.var_time_old = self.var_time_currently
			self.clock.config(text = self.var_time_currently)
			if self.var_track_enable == '1':
				if ((self.var_track_set[0]*60 + self.var_track_set[1])) > ((self.var_track_value[0]*60 + self.var_track_value[1])):
							self.var_track_value[1]+=1
							if self.var_track_value[1] == 60:
								self.var_track_value[1]=0
								self.var_track_value[0]+=1
							if self.var_track_value[1]== 60 and self.var_track_value[0]==60:
								self.var_track_value[0]=0
								self.var_track_value[1]=0
								self.var_track_enable='0'
			
				else:
					self.var_track_enable = '0'
					self.enabel_tracking('0')

				###Set Output###
				#virtual
				self.steps.config(text='%0.2d : %0.2d' %(self.var_track_value[0], self.var_track_value[1]))
				#LED
				#Seconds, second position ##:#X
				#self.class_smbus.write_out(5, (int(str(self.var_track_value[1]).zfill(2)[1])))
				#Seconds, first position ##:X#
				#self.class_smbus.write_out(4, (int(str(self.var_track_value[1]).zfill(2)[0])))
				#Minutes, second position #X:##
				#self.class_smbus.write_out(3, (int(str(self.var_track_value[0]).zfill(2)[1])))
				#Seconds, first position X#:##
				#self.class_smbus.write_out(2, (int(str(self.var_track_value[0]).zfill(2)[0])))
		
		#restart function, get interval
		self.clock.after(400, self.stopwatch_master_update)
				

	def enabel_tracking(self, toogle):
		self.toogle = toogle
		#Start tracking
		if self.toogle=='1':
			#Set buttons state
			self.minutes_plus.config(state=DISABLED)
			self.minutes_minus.config(state=DISABLED)
			self.secondes_plus.config(state=DISABLED)
			self.secondes_minus.config(state=DISABLED)
			self.btn_start.config(state=DISABLED)
			self.btn_break.config(state=ACTIVE)
			self.btn_clear.config(state=ACTIVE)
			self.var_track_enable='1'
		#Break tracking
		elif self.toogle=='0':
			#Set buttons state
			self.minutes_plus.config(state=ACTIVE)
			self.minutes_minus.config(state=ACTIVE)
			self.secondes_plus.config(state=ACTIVE)
			self.secondes_minus.config(state=ACTIVE)
			self.btn_start.config(state=ACTIVE)
			self.btn_break.config(state=DISABLED)
			self.var_track_enable='0'

	def clear_count(self):
		#diable tracking
		self.var_track_enable='0'
		#Set buttons state
		self.minutes_plus.config(state=ACTIVE)
		self.minutes_minus.config(state=ACTIVE)
		self.secondes_plus.config(state=ACTIVE)
		self.secondes_minus.config(state=ACTIVE)
		self.btn_start.config(state=ACTIVE)
		self.btn_break.config(state=DISABLED)
		###Restore###
		#Output virtual
		self.var_track_value[0]=0
		self.var_track_value[1]=0
		self.steps.config(text='00 : 00')
		#Reset all LEDs
		#self.class_smbus.write_out(7, 8)
		#self.class_smbus.write_out(6, 8)
		#self.class_smbus.write_out(5, 8)
		#self.class_smbus.write_out(4, 8)
		#self.class_smbus.write_out(3, 8)
		#self.class_smbus.write_out(2, 8)
		#self.class_smbus.write_out(1, 8)
		#self.class_smbus.write_out(0, 8)

#countdown_master_Mainframe
class countdown_master_class():
	###Standard funcion###
	def __init__(self, scoreboard_master, class_smbus):
		print('countdown_master started')
		self.operationMode_master = scoreboard_master
		self.class_smbus = class_smbus
		#Reset all LEDs
		#self.class_smbus.write_out(7, 8)
		#self.class_smbus.write_out(6, 8)
		#self.class_smbus.write_out(5, 8)
		#self.class_smbus.write_out(4, 8)
		#self.class_smbus.write_out(3, 8)
		#self.class_smbus.write_out(2, 8)
		#self.class_smbus.write_out(1, 8)
		#self.class_smbus.write_out(0, 8)
		self.var_track_set = None
		self.var_track_value = None
		self.var_time_old = None
		self.var_track_enable = None
		self.var_track_set = [0,0]
		self.var_track_value = [0,0,0,0]

		###Draw countdown_master GUI###
		print('countdown_master GUI will be draw...')
		self.operationMode_master.title('Coundown')
		
		#Fullscreen
		#self.operationMode_master.attributes('-fullscreen',True)
		self.operationMode_master.takefocus=True

	        ###Headerinfo###
		self.Header01=Label(self.operationMode_master, text='Countdown', font='Arial 50 bold')
		self.Header01.pack()
		self.Header01.place(relx=0.5, y=50, anchor=CENTER)

		###Time Input###
		#Label for minutes, can change with beneath buttons
		self.minutes=Label(self.operationMode_master, text='00', font='Arial 40 bold')
		self.minutes.pack()
		self.minutes.place(relx=0.5, rely=0.5, x=-100, anchor=CENTER)
		
		#Increment minutes
		self.minutes_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',0))
		self.minutes_plus.pack()
		self.minutes_plus.place(relx=0.5, rely=0.5, x=-30, y=-5, height=40, width=40, anchor=S)
	
		#Decrement minutes
		self.minutes_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',0))
		self.minutes_minus.pack()
		self.minutes_minus.place(relx=0.5, rely=0.5, x=-30, y=5, height=40, width=40, anchor=N)
	
		#Label for seconds, can change with beneath buttons
		self.secondes=Label(self.operationMode_master, text='00', font='Arial 40 bold')
		self.secondes.pack()
		self.secondes.place(relx=0.5, x=30, rely=0.5, anchor=CENTER)
	
		#Incremnts seconds
		self.secondes_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',1))
		self.secondes_plus.pack()
		self.secondes_plus.place(relx=0.5, rely=0.5, x=100, y=-5, height=40, width=40, anchor=S)
	
		#Decrement seconds
		self.secondes_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',1))
		self.secondes_minus.pack()
		self.secondes_minus.place(relx=0.5, rely=0.5, x=100, y=5, height=40, width=40, anchor=N)
		
		#countdown and Countdown Label	
		self.steps=Label(self.operationMode_master, text='00 : 00', font='Arial 80 bold')
		self.steps.pack()
		self.steps.place(relx=0.5, rely=0.25, anchor=CENTER)

		###Scores###	
		#Label and InfoLabel for score of home team, can change with beneath buttons
		self.Home_Player_Info=Label(self.operationMode_master, text='Punkte Heimmannschaft', font='Arial 20 bold')
		self.Home_Player_Info.pack()
		self.Home_Player_Info.place(relx=0, x=200, rely=0.5, y=-70, anchor=CENTER)
	
		#increment the score of home team
		self.Home_Player=Label(self.operationMode_master, text='00', font='Arial 60 bold')
		self.Home_Player.pack()
		self.Home_Player.place(relx=0, x=150, rely=0.5, anchor=CENTER)
	
		#increment the score of home team
		self.Home_Player_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',2))
		self.Home_Player_plus.pack()
		self.Home_Player_plus.place(relx=0, rely=0.5, x=250, y=-5, height=40, width=40, anchor=S)
	
		#decrement the score of home team
		self.Home_Player_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',2))
		self.Home_Player_minus.pack()
		self.Home_Player_minus.place(relx=0, rely=0.5, x=250, y=5, height=40, width=40, anchor=N)
	
		#Label and InfoLabel for score of home team, can change with beneath buttons	
		self.Guest_Player_Info=Label(self.operationMode_master, text='Punkte Gastmanschaft', font='Arial 20 bold')
		self.Guest_Player_Info.pack()
		self.Guest_Player_Info.place(relx=1, x=-200, rely=0.5, y=-70, anchor=CENTER)
	
		self.Guest_Player=Label(self.operationMode_master, text='00', font='Arial 60 bold')
		self.Guest_Player.pack()
		self.Guest_Player.place(relx=1, x=-150, rely=0.5, anchor=CENTER)
		
		#increment the score of guest team
		self.Guest_Player_plus=Button(self.operationMode_master, text='+', font='Arial 40 bold', command=lambda: self.operationMode_master_set('+',3))
		self.Guest_Player_plus.pack()
		self.Guest_Player_plus.place(relx=1, x=-250, rely=0.5, y=-5, height=40, width=40, anchor=S)
	
		#decrement the score of guest team
		self.Guest_Player_minus=Button(self.operationMode_master, text='-', font='Arial 40 bold', command=lambda: self.operationMode_master_set('-',3))
		self.Guest_Player_minus.pack()
		self.Guest_Player_minus.place(relx=1, x=-250, rely=0.5, y=5, height=40, width=40, anchor=N)
			
		###Start Counter###
		self.btn_start=Button(self.operationMode_master, text='Start', font='Arial 32 bold', command=lambda: self.enabel_tracking('1'))
		self.btn_start.pack()
		self.btn_start.place(relx=0.25, rely=0.8, height=100, width=150, anchor=CENTER)
	
		###Break Counter###
		self.btn_break=Button(self.operationMode_master, text='Pause', font='Arial 32 bold', state=DISABLED, command=lambda: self.enabel_tracking('0'))
		self.btn_break.pack()
		self.btn_break.place(relx=0.5, rely=0.8, height=100, width=150, anchor=CENTER)
		
		###Clear and stop counter###
		self.btn_clear=Button(self.operationMode_master, text='Stopp', font='Arial 32 bold', state=DISABLED, command=self.clear_count)
		self.btn_clear.pack()
		self.btn_clear.place(relx=0.75, rely=0.8, height=100, width=150, anchor=CENTER)
	
		###Clock Label###
		self.clock=Label(self.operationMode_master, font='Arial 20 bold')
		self.clock.pack()
		self.clock.place(relx=0.5, rely=1, x=-5, y=-5, anchor=S)
		#Start update function
		self.countdown_master_update()

	        ###Close stopwatch GUI###
		self.exit = Button(self.operationMode_master, text='Zur√ºck', command=lambda: self.operationMode_master.destroy())
		self.exit.pack()
		self.exit.place(relx=1, rely=1, x=-10, y=-10, anchor=SE)

	def operationMode_master_set(self, toggle, position):
			if position == 0 or position == 1:
				if toggle == '+' and self.var_track_set[position] < 60:
					self.var_track_set[position]+=1
					self.var_track_value[position] = self.var_track_set[position]
				
				elif toggle == '-' and self.var_track_set[position] > 0:
					self.var_track_set[position] -= 1
					self.var_track_value[position] = self.var_track_set[position]
				
				###Set Output###
				#Minutes update when setup the interval
				if position == 0:
					#Virtual
					self.minutes.config(text='%0.2d' %(self.var_track_set[position]))
					#self.class_smbus.write_out(2, (int(str(self.var_track_set[position]).zfill(2)[0])))
					#self.class_smbus.write_out(3, (int(str(self.var_track_set[position]).zfill(2)[1])))
				#Seconds update when setup the interval
				elif position == 1:
					#Virutal
					self.secondes.config(text='%0.2d' %(self.var_track_set[position]))
					#LED
					#self.class_smbus.write_out(4, (int(str(self.var_track_set[position]).zfill(2)[0])))
					#self.class_smbus.write_out(5, (int(str(self.var_track_set[position]).zfill(2)[1])))
				self.steps.config(text='%0.2d : %0.2d' %(self.var_track_set[0], self.var_track_set[1]))
	
			elif position == 2 or position == 3:
				if toggle == '+' and self.var_track_value[position] < 99:
					self.var_track_value[position]+=1
				elif toggle == '-' and self.var_track_value[position] > 0:
					self.var_track_value[position]-=1
	
				if position == 2:
					#Virtual
					self.Home_Player.config(text='%0.2d' %(self.var_track_value[position]))
					#LED
					#self.class_smbus.write_out(0, (int(str(self.var_track_value[position]).zfill(2)[0])))
					#self.class_smbus.write_out(1, (int(str(self.var_track_value[position]).zfill(2)[1])))
				elif position == 3:
					#Virtual
					self.Guest_Player.config(text='%0.2d' %(self.var_track_value[position]))
					#LED
					#self.class_smbus.write_out(6, (int(str(self.var_track_value[position]).zfill(2)[0])))
					#self.class_smbus.write_out(7, (int(str(self.var_track_value[position]).zfill(2)[1])))
	
	def countdown_master_update(self):
		#for exactier timing self.var_time_old is define in __init___
		self.var_time_currently = time.strftime('%H:%M:%S')
		#print(self.var_time_currently != self.var_time_old)
		if self.var_time_currently != self.var_time_old:
			self.var_time_old = self.var_time_currently
			self.clock.config(text = self.var_time_currently)
			if self.var_track_enable == '1':
				if (self.var_track_value[0]*60 + self.var_track_value[1]) > 0:
					self.var_track_value[1]-=1
					if self.var_track_value[1] == -1:
						self.var_track_value[0]-=1
						self.var_track_value[1]=59
				else:
					self.var_track_enable = '0'
				
				###Set Output###
				#virtual
				self.steps.config(text='%0.2d : %0.2d' %(self.var_track_value[0], self.var_track_value[1]))
				#LED
				#Seconds, second position ##:#X
				#self.class_smbus.write_out(5, (int(str(self.var_track_value[1]).zfill(2)[1])))
				#Seconds, first position ##:X#
				#self.class_smbus.write_out(4, (int(str(self.var_track_value[1]).zfill(2)[0])))
				#Minutes, second position #X:##
				#self.class_smbus.write_out(3, (int(str(self.var_track_value[0]).zfill(2)[1])))
				#Seconds, first position X#:##
				#self.class_smbus.write_out(2, (int(str(self.var_track_value[0]).zfill(2)[0])))
		
		#Restart function, to get interval
		self.clock.after(400, self.countdown_master_update)

	def enabel_tracking(self, toogle):
		self.toogle = toogle
		#if toogle == '1' then tracking is enabled, else disabled
		if self.toogle=='1':
			#Set buttons state
			self.minutes_plus.config(state=DISABLED)
			self.minutes_minus.config(state=DISABLED)
			self.secondes_plus.config(state=DISABLED)
			self.secondes_minus.config(state=DISABLED)
			self.btn_start.config(state=DISABLED)
			self.btn_break.config(state=ACTIVE)
			self.btn_clear.config(state=ACTIVE)
			self.var_track_enable='1'
		elif self.toogle=='0':
			#Set buttons state
			self.minutes_plus.config(state=ACTIVE)
			self.minutes_minus.config(state=ACTIVE)
			self.secondes_plus.config(state=ACTIVE)
			self.secondes_minus.config(state=ACTIVE)
			self.btn_start.config(state=ACTIVE)
			self.btn_break.config(state=DISABLED)
			self.var_track_enable='0'

	def clear_count(self):
		#disable tracking
		self.var_track_enable='0'
		#set buttons
		self.btn_start.config(state=ACTIVE)
		self.btn_break.config(state=DISABLED)
		#Set buttons state
		self.minutes_plus.config(state=ACTIVE)
		self.minutes_minus.config(state=ACTIVE)
		self.secondes_plus.config(state=ACTIVE)
		self.secondes_minus.config(state=ACTIVE)
		self.btn_start.config(state=ACTIVE)
		self.btn_break.config(state=DISABLED)
		###restore###
		#timing variables
		self.var_track_value[0]=self.var_track_set[0]
		self.var_track_value[1]=self.var_track_set[1]
		#Output virtual
		self.steps.config(text='%0.2d : %0.2d' %(self.var_track_value[0], self.var_track_value[1]))
		#Reset all LEDs
		#self.class_smbus.write_out(7, 8)
		#self.class_smbus.write_out(6, 8)
		#self.class_smbus.write_out(5, 8)
		#self.class_smbus.write_out(4, 8)
		#self.class_smbus.write_out(3, 8)
		#self.class_smbus.write_out(2, 8)
		#self.class_smbus.write_out(1, 8)
		#self.class_smbus.write_out(0, 8)

#Setup smbus
class setupsmbus():
	def __init__(self, addresses):
		#Variables
		self.var_out_addresses = addresses
		self.var_track_countout=[0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111100,0b00000111,0b01111111,0b01100111]

		self.addresses = addresses
		#Open Bus on interface 1
		self.smbus = smbus.SMBus(1)
		#Define all Ports on all ICs as Output (0x00) and set initial all Ports to hight
		#for address in self.addresses:
			#print(address)
			#self.smbus.write_byte_data(address,0x00,0x00)
			#self.smbus.write_byte_data(address,0x09,0b01111111)
		#Temporary
		#self.smbus.write_byte_data(0x25,0x00,0x00)
		#self.smbus.write_byte_data(0x25,0x09,0b01111111)

	#write out function
	def write_out(self, address, value):
		self.address = address
		self.value = value
		#Tempory testing
		print(var_out_addresses[self.address])
		print(self.value)
		#self.smbus.write_byte_data(var_out_addresses[self.address],0x09,self.var_track_countout[self.value])

#Setup GPIO Interrupt, Controller
class setupGPIO():
	def __init__(self, class_scoreboard_main):
		print('GPIO Port Setup started')
		self.count = 0
		###Contactplan###################
		#GPIO14 = Home Team Plus	#
		#GPIO15 = Home Team Minus	#
		#				#
		#GPIO23 = Guest Team Plus	#
		#GPIO24	= Guest Team Minus	#
		#				#
		#GPIO8  = Minutes Plus		#
		#GPIO7  = Minutes Minus		#
		#				#
		#GPIO9  = Seconds Plus		#
		#GPIO10	= Seconds Minus		#
		#				#
		#GPIO17 = Start			#
		#GPIO27 = Break			#
		#GPIO22	= Stop			#
		#GPIO04 = Quit			#
		#################################

		self.scoreboard_main = class_scoreboard_main
		#use GPIO Layout from Raspberry
		GPIO.setmode(GPIO.BCM)
		
		#Set GPIO Pins as Input Falling Raise
		GPIO.setup(14, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(14, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(15, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(15, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(23, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(23, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(24, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(8, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(8, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(7, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(7, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(9, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(9, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(10, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(17, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(27, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(27, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(22, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(22, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)
		GPIO.setup(4, GPIO.IN, pull_up_down=GPIO.PUD_UP)
		GPIO.add_event_detect(4, GPIO.FALLING, callback=self.pin_interrupt, bouncetime=300)

	def pin_interrupt(self, channel):
		self.channel = channel
		print(self.scoreboard_main.scoreboard_master.winfo_children())
		print('GPIO Port: '+str(self.channel)+' activated')
		if 'tkinter.Toplevel' in str(self.scoreboard_main.scoreboard_master.winfo_children()):
			print('Operation Mode was select already')
			#Score Home Player
			if self.channel == 14:
				self.scoreboard_main.operationMode.operationMode_master_set('+',2)
			elif self.channel == 15:
				self.scoreboard_main.operationMode.operationMode_master_set('-',2)
			#Score Guest Player
			elif self.channel == 23:
				self.scoreboard_main.operationMode.operationMode_master_set('+',3)
			elif self.channel == 24:
				self.scoreboard_main.operationMode.operationMode_master_set('-',3)
			#Tracking Minutes
			elif self.channel == 8:
				self.scoreboard_main.operationMode.operationMode_master_set('+',0)
			elif self.channel == 7:
				self.scoreboard_main.operationMode.operationMode_master_set('-',0)
			#Tracking Seconds
			elif self.channel == 9:
				self.scoreboard_main.operationMode.operationMode_master_set('+',1)
			elif self.channel == 10:
				self.scoreboard_main.operationMode.operationMode_master_set('-',1)
			#Action Buttons
			elif self.channel == 17:
				self.scoreboard_main.operationMode.enabel_tracking('1')
			elif self.channel == 27:
				self.scoreboard_main.operationMode.enabel_tracking('0')
			elif self.channel == 22:
				self.scoreboard_main.operationMode.clear_count()
			elif self.channel == 4:
				self.scoreboard_main.operationMode.operationMode_master.destroy()
		else:
			print('Operation Mode was not select already, only Scoreboard_main is active')
			print(self.count)
			#Ceck if start(next config) or stop(last config) pressed
			if self.channel == 14 and self.count < 7 :
				self.count += 1
			elif self.channel == 15 and self.count > 0:
				self.count -= 1
			elif self.channel == 17:
				self.scoreboard_main.new_window(countdown_master_class)
			elif self.channel == 22:
				self.scoreboard_main.new_window(stopwatch_master_class)
			elif self.channel == 27:
				self.scoreboard_main.scoreboard_initial_save()

			else:
				if self.channel == 23:
					self.scoreboard_main.scoreboard_initial_set('+',self.count)
				elif self.channel == 24:
					self.scoreboard_main.scoreboard_initial_set('-',self.count)



		#self.scoreboard_main.scoreboard_initial_set('+',0)
		#self.scoreboard_main.operationMode.operationMode_master_set('+',0)

#Mainfunktion
if __name__ == '__main__':
	print('Scoreboard script started')
	
	#find root direction of script
	var_root_dir = os.path.dirname(os.path.realpath(__file__))
	print('Script root: '+var_root_dir)
	
	#Setup smbus
	var_out_addresses = [0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27]
	class_setupsmbus = setupsmbus(var_out_addresses)
	#Setup GUI
	root_gui = Tk()
	class_scoreboard_main = scoreboard_main_class(root_gui, class_setupsmbus)
	class_setupGPIO = setupGPIO(class_scoreboard_main)
	root_gui.mainloop()
